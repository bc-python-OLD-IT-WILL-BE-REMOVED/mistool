==============
misTool - TODO
==============

**Amélioration de la classe ``regpat2meta`` du module ``config.pattern`` :** utilisation du module ¨dare pour une gestion fine des différences entre les "regpatterns" et les ¨reg_frs de ¨python.


**Amélioration de la fonction ``DirView`` du module ``os_use`` :**


limiter nbre de fichiers/dossiers trouvés visibles via  * ... [etc]   et  * ... [autres]   avec choix de langues (angalis par défaut mais définissable)
    ---> comment ?


limiter laprofondeur de recherche via    + nomdir [...]
    ---> comment ? regpattern suffisant ?



**¨Maj des modules impactés par la prise en compte de ``pathlib`` dans ``os_use``:** voici les modules concernés.

    1) Dans le module ``python_use``, la fonction ``runpys`` ????

    utilise juste un argument ``patterns`` en remplacement des arguments ``prefixes`` et ``depth`` (voir ce qui a été dit pour les fonctions ``nextfile`` et ``listfile`` du module ``os_use``).


    1) Dans le module ``latex_use``, la fonction ``clean`` ????

    utilise juste l'argument ``patterns`` en remplacement des arguments ``keep``, ``discard`` et ``depth`` (voir ce qui a été dit pour les fonctions ``nextfile`` et ``listfile`` du module ``os_use``).













**Utilisation de ¨setuptools:** le fichier ``setup.py`` se base maintenant sur ¨setuptools. Ceci se fait très efficacement grâce à ¨setytup un autre projet de l'auteur de ¨mistool.






A VOIR ????

    https://github.com/mahmoud/boltons ???

    string
    	---> befor after = amount, space, currency = "123.45 USD".partition(" ")
    	---> S.expandtabs(tabsize=8)


    -----> type input securisé  via regex  ????
    			* int_input




**Mise à jour de la documentation on technique en français:** la nouvelle fçaon d'utiliser le moddule ``os_use`` est maintenant documentée en français.



**Abandon de la prise en charge du module ¨unittest dans le module ``log_test_use``:** dorénavant, ce sera le module ¨pytest qui sera privilégié.


**Une belle nouveauté dans le module ``python_use`` :** la classe ``MKDict`` permet de définir des dictionnaires dont on peut extraire une valeur en utilisant une syntaxe du type ``mymkdict["key_1", "subkey_1", "subsubkey_1"]`` au lieu de ``mymkdict["key_1"]["subkey_1"]["subsubkey_1"]``.

    MKDict ---> Multi Keys Dict

    toc = MKDict({
        "I": {
            "A": {
                "1": "Dans I-A-1",
                "2": "Dans I-A-2",
            }
        }
    })


    print(toc)
    print()
    print(toc["I", "A", "2"])


**Mise en ligne d'une documentation non technique en français :** ceci a été rendu possible grâce au projet ¨pyba qui lui aussi est disponible sur ¨pypi et ¨github.


**Mise en ligne de la documentation technique en anglais uniquement :** ceci a été rendu possible grâce au projet ¨pybadoc qui lui aussi est disponible sur ¨pypi et ¨github.


**Amélioration côté développement interne :** voici ce qui a évolué.

    1) L'effacité des tests est évaluée à l'aide de ¨coverage.

    2) ¨pep8py et ¨pylint sont consultés pour améliorer le code de ¨mistool lorsque cela paraît pertinent.

	3) Le module ``pdt.mistool.orpyste`` du package maison ``pdt`` n'est plus utilisé. C'est la mort de cet étrange ``pdt``. À la place, on utilise tout simplement ¨orpyste qui est devenu titalement indépendant de ¨mistool. Et oui, on se professionnalise... ;-)

    Ceci permet au passage de rendre les tests disponibles sur ¨github uniquement (pas sur ¨pypi par choix).


**Améliorations du module ``latex_use`` :** il est maintenant possible d'indiquer des installations non standards de ¨latex qui ont été "faites à la main".


**De nouveaux motifs dans le module ``config\pattern.py`` :** ????
