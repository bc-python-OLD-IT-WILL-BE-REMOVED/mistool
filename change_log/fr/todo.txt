==============
misTool - TODO
==============

???? ---------->    **Publication de la nouvelle version de ``mistool`` :** cette nouvelle version casse la rétro-compatibilité (voir les ¨chgts depuis le date::``2015-05-26``).


???? ---------->    **Amélioration du fichier ``README.md`` :** des exemples "en console" ont été ajoutés afin de rendre le package plus "bankable".


???? ---------->    **Noms des versions :** les numéros de version deviennent standards en suivant la convention ``majeur.mineur.patch``, cette version ayant pour numéro ``0.0.0`` car le projet ¨mistool reste à l'état très `¨beta`. Cette norme étant suivie par tout le monde, soyons grégaire pour devenir clair...


???? ---------->    **Ajout d'une licence :** le projet est maintenant sous licence ???.


???? ---------->    **Utilisation de ``setuptools`` :** comme ``pip`` a décidé d'abandonner le support de ``distutils``, il a fallu accélérer l'utilisation de ``setuptools``, un outil plus sympathique à employer.


> ---------------------------- <

**Une nouvelle méthode de tri pour la classe ``os_use.DirView``:**  ????
    ---> trier par type d'application:  on trie en fait par extesnion et on regroupe les extensions par thème


> ---------------------------- <

???? ---------->    **Amélioration et mise à jour des tests :** on utilise maintenant ¨pytest ce qui simplifie énormément les choses. On va enfin à l'essentiel !

Ceci étant dit, le module ``pdt.mistool.orpyste`` du package maison ``pdt`` est encore utilisé (le nouveau module ``pathlib`` permet maintenant de travailler facilement avec des chemins de dossiers et de fichiers même si la classe ``PPath`` facilite encore plus les choses).

En attendant la nouvelle version de ¨orpyste, qui ne sera plus du tout dépendante de ¨mistool, on continue encore à utiliser l'affreux ``pdt.mistool.orpyste`` mais plus pour très longtemps... Une fois ceci fait, les tests seront disponibles sur ¨github et ¨pypi (afin que les utilisateurs puissent tester leur installation).


> ---------------------------- <

**Abandon de la prise en charge du module ¨unittest dans le module ``log_test_use``:** dorénavant, ce sera le module ¨pytest qui sera privilégié.


> ---------------------------- <

Utilisation de __slots__ , __version__ ... Voir ce qu'il faut ajouter.


> ---------------------------- <

**Amélioration côté développement interne :** voici ce qui a évolué.

    1) L'effacité des tests est évaluée à l'aide de ¨coverage.

    2) ¨pep8py et ¨pylint sont consultés pour améliorer le code de ¨mistool lorsque cela paraît pertinent.

	3) Le module ``pdt.mistool.orpyste`` du package maison ``pdt`` n'est plus utilisé. C'est la mort de cet étrange ``pdt``. À la place, on utilise tout simplement ¨orpyste qui est devenu totalement indépendant de ¨mistool. Et oui, on se professionnalise... ;-)

    Ceci permet au passage de rendre les tests disponibles sur ¨github uniquement (pas sur ¨pypi par choix).


> ---------------------------- <

Gestion de tous les types d'importation
    * from mistool import os_use
    * from mistool.os_use import DirView
    * AUTRES ?


> ---------------------------- <

**Utilisation de ¨setuptools:** le fichier ``setup.py`` se base maintenant sur ¨setuptools. Ceci se fait très efficacement grâce à ¨setytup un autre projet de l'auteur de ¨mistool.


> ---------------------------- <

A VOIR ????

    https://github.com/mahmoud/boltons ???

    string
    	---> S.expandtabs(tabsize=8)


    -----> type input securisé  via regex  ????
    			* int_input


> ---------------------------- <

**Une belle nouveauté dans le module ``python_use`` :** la classe ``MKDict`` permet de définir des dictionnaires dont on peut extraire une valeur en utilisant une syntaxe du type ``mymkdict["key_1", "subkey_1", "subsubkey_1"]`` au lieu de ``mymkdict["key_1"]["subkey_1"]["subsubkey_1"]``.

    MKDict ---> Multi Keys Dict

    toc = MKDict({
        "I": {
            "A": {
                "1": "Dans I-A-1",
                "2": "Dans I-A-2",
            }
        }
    })


    print(toc)
    print()
    print(toc["I", "A", "2"])


> ---------------------------- <

**Mise en ligne d'une documentation non technique en français :** ceci a été rendu possible grâce au projet ¨pyba qui lui aussi est disponible sur ¨pypi et ¨github.


> ---------------------------- <

**Mise en ligne de la documentation technique en anglais uniquement :** ceci a été rendu possible grâce au projet ¨pybadoc qui lui aussi est disponible sur ¨pypi et ¨github.


> ---------------------------- <

**Améliorations du module ``latex_use`` :** il est maintenant possible d'indiquer des installations non standards de ¨latex qui ont été "faites à la main".
