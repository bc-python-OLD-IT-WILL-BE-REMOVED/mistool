==========
2016-03-14
==========

**Refactorisation de la méthode ``walk`` de la classe ``os_use.PPath`` :** tout le code a été revu car il était inutilement compliqué (un mauvais héritage de ce qu'il fallait faire avant la naissance de ``pathlib.Path`` et de la lenteur des anciennes versions de la fonction ``os.walk``). Ceci implique les ¨chgts suivants.

    1) Comme les recherches se font maintenant toujours de façon relative, la requête ``"relative"`` a été supprimée.

    2) Les dossiers vides ou ne contenant que des fichiers ne vérifiant pas un motif n'existent plus. Du coup, la requête ``"empty"`` a été retirée.


**¨Maj de la méthode cachée ``_build_listview`` de la classe ``term_use.DirView`` :** les ¨chgts faits dans la méthode ``walk`` de la classe ``os_use.PPath`` ont été répercutés dans la classe ``term_use.DirView`` ce qui a permis de simplifier le code.


==========
2016-03-13
==========

**Du changement dans la méthode ``os_use.PPath.walk`` :** voici ce qui a été fait.

    1) L'argument ``givetags`` et la méthode cachée associée ``__tagsreturnedbywalk`` n'existent plus. Les étiquettes sont directement stockées dans un attribut "caché" ``_tag`` des classes ``PPath`` renvoyées.

    2) Les fichiers ne vérifiant pas un motif "regpath" sont bien plus logiquement renvoyés comme des chemins de type "fichier" avec un nom particulier donné par ``OTHER_FILES_NAME``. De plus, les dossiers ne contenant que ce type de fichiers ont une étiquette particulière maintenant donné par ``DIR_ONLY_OTHERS_TAG``.

    3) Correction de deux bugs révélés par certains tests de la classe ``term_use.DirView``.

        a) La gestion des dossiers et des fichiers cachés était mauvaise. Ceci devrait être bon maintenant.

        b) La définition du tri de type ``"filefirst"`` était fausse.


**Diverses corrections et améliorations dans la classe ``term_use.DirView`` :** la mise en place de tests unitaires a abouti aux modifications suivantes.

    1) La nouvelle version de ``toc`` affiche maintenant toujours tous les fichiers dans un dossier, puis ensuite sont traités de façon analogue les sous-dossiers... ¨etc. C'est bien plus logique !

    2) Deux gros bugs corrigés.

        a) Les dossiers contenant uniquement des fichiers ne vérifiant pas le motif "regpath" apparassaient à tors avec le réglage de ¨mef ``"found"``. Ceci a été réparé.

        b) Un bug sévère avec la méthode ``tree`` qui pouvait renvoyer "tout à plat" avec le réglage de ¨mef ``"found"``.


==========
2016-03-08
==========

**Suite de la mise à jour des tests :** voici les modules dont les tests ont été actualisés.

    1) ``latex_use``.
    2) ``python_use``.
    3) ``term_use`` : tests uniquement des cadres textuels pour le moment.
    4) ``url_use``.


**Un nouveau bug corrigé dans la fonction ``term_use.buildframe`` :** l'utilisation d'espaces comme décorateurs n'était pas prise en compte. Ceci est maintenant possible.


**Petite amélioration côté technique de programmation :** utilisation de constantes à la place de chaînes de caractères codées "à la main". C'est plus pro !


==========
2016-03-07
==========

**Amélioration et début de la mise à jour des tests :** voici ce qui a été fait.

    1) On utilise maintenant ¨pytest ce qui simplifie énormément les choses. On va enfin à l'essentiel !

    2) Les tests sont disponibles sur ¨github afin que les utilisateurs avertis puissent tester leur installation, mais ils ne le seront pas sur ¨pypi pour ne pas polluer une distribution ¨python lors d'une installation de ¨mistool.

    3) L'étrange package maison ``pdt`` a été totalement abandonné ! À la place, on utilise tout simplement ¨orpyste qui est devenu totalement indépendant de ¨mistool et le très pratique package ``pathlib``. Et oui, on se professionnalise... ;-)

    4) << ATTENTION ! >> Seuls les tests du module ``date_use`` ont été mis à jour pour le moment afin de valider la nouvelle façon de procéder. Le reste viendra petit à petit...


==========
2016-03-03
==========

**Un oubli idiot dans la méthode ``walk`` de la classe ``os_use.PPath`` :** les doubles points dans ``"relative::{0}".format(regpath)`` avaient été omis.


**Mise à jour du module ``latex_use`` relativement à ``os_use`` :** l'utilisation en production de ``latex_use`` a révélé deux oublis.

    1) On fait maintenant appel à la méthode ``is_protected`` de la classe ``os_use.PPath`` au lieu de feu la fonction ``canmodify``.

    2) La classe ``Build`` a été mise à jour relativement à la dernière version de ``os_use.runthis``. Ceci s'est accompagné par le changement du nom de l'argument ``showinfos`` en ``showoutput``.
